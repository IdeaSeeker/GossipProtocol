// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: service/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GossipServiceClient is the client API for GossipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GossipServiceClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PongMessage, error)
	ShareData(ctx context.Context, opts ...grpc.CallOption) (GossipService_ShareDataClient, error)
}

type gossipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipServiceClient(cc grpc.ClientConnInterface) GossipServiceClient {
	return &gossipServiceClient{cc}
}

func (c *gossipServiceClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PongMessage, error) {
	out := new(PongMessage)
	err := c.cc.Invoke(ctx, "/GossipService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipServiceClient) ShareData(ctx context.Context, opts ...grpc.CallOption) (GossipService_ShareDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &GossipService_ServiceDesc.Streams[0], "/GossipService/ShareData", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipServiceShareDataClient{stream}
	return x, nil
}

type GossipService_ShareDataClient interface {
	Send(*PeerData) error
	Recv() (*PeerData, error)
	grpc.ClientStream
}

type gossipServiceShareDataClient struct {
	grpc.ClientStream
}

func (x *gossipServiceShareDataClient) Send(m *PeerData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipServiceShareDataClient) Recv() (*PeerData, error) {
	m := new(PeerData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GossipServiceServer is the server API for GossipService service.
// All implementations must embed UnimplementedGossipServiceServer
// for forward compatibility
type GossipServiceServer interface {
	Ping(context.Context, *PingMessage) (*PongMessage, error)
	ShareData(GossipService_ShareDataServer) error
	mustEmbedUnimplementedGossipServiceServer()
}

// UnimplementedGossipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGossipServiceServer struct {
}

func (UnimplementedGossipServiceServer) Ping(context.Context, *PingMessage) (*PongMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGossipServiceServer) ShareData(GossipService_ShareDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ShareData not implemented")
}
func (UnimplementedGossipServiceServer) mustEmbedUnimplementedGossipServiceServer() {}

// UnsafeGossipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GossipServiceServer will
// result in compilation errors.
type UnsafeGossipServiceServer interface {
	mustEmbedUnimplementedGossipServiceServer()
}

func RegisterGossipServiceServer(s grpc.ServiceRegistrar, srv GossipServiceServer) {
	s.RegisterService(&GossipService_ServiceDesc, srv)
}

func _GossipService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GossipService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipService_ShareData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServiceServer).ShareData(&gossipServiceShareDataServer{stream})
}

type GossipService_ShareDataServer interface {
	Send(*PeerData) error
	Recv() (*PeerData, error)
	grpc.ServerStream
}

type gossipServiceShareDataServer struct {
	grpc.ServerStream
}

func (x *gossipServiceShareDataServer) Send(m *PeerData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipServiceShareDataServer) Recv() (*PeerData, error) {
	m := new(PeerData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GossipService_ServiceDesc is the grpc.ServiceDesc for GossipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GossipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GossipService",
	HandlerType: (*GossipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GossipService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShareData",
			Handler:       _GossipService_ShareData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/service.proto",
}
